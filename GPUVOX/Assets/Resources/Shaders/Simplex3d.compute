//Boris Novikov (17.09.2013)
//Special thanks to Johannes Gotlén for shader example.

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Simplex3d
#pragma kernel FillEmpty
#pragma kernel FillBorders
#pragma kernel Plane
#pragma kernel Sphere
#pragma kernel SphereAdd

#define F3 1.0/3.0 
#define G3 1.0/6.0 

//Start position of this chunk
float4 _StartPos;

float4 _BrushPos;
float _Brush_Size;
float _Brush_Strength;

//Noise parameters
float _Str;
float _NoiseA;
float _NoiseB;
float _NoiseC;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float> Result;

RWTexture3D<float> MegaChunk;

RWTexture3D<float> vol0;
RWTexture3D<float> vol1;
RWTexture3D<float> vol2;
RWTexture3D<float> vol3;
RWTexture3D<float> vol4;
RWTexture3D<float> vol5;
RWTexture3D<float> vol6;
RWTexture3D<float> vol7;
RWTexture3D<float> vol8;

RWTexture3D<float> vol9;
RWTexture3D<float> vol10;
RWTexture3D<float> vol11;
RWTexture3D<float> vol12;
RWTexture3D<float> vol13;
RWTexture3D<float> vol14;
RWTexture3D<float> vol15;
RWTexture3D<float> vol16;
RWTexture3D<float> vol17;

RWTexture3D<float> vol18;
RWTexture3D<float> vol19;
RWTexture3D<float> vol20;
RWTexture3D<float> vol21;
RWTexture3D<float> vol22;
RWTexture3D<float> vol23;
RWTexture3D<float> vol24;
RWTexture3D<float> vol25;
RWTexture3D<float> vol26;


RWTexture3D<float> vol100;
RWTexture3D<float> vol010;
RWTexture3D<float> vol001;
RWTexture3D<float> volm100;
RWTexture3D<float> vol0m10;
RWTexture3D<float> vol00m1;


/*[numthreads(1,1,1)]
void AddToMegaChunk (uint3 id : SV_DispatchThreadID)
{
	int x,y,z;
	x=id.x; y=id.y; z=id.z;
	int S = 8;
	MegaChunk[int3(x,y,z)] = 
	vol0[int3(x-S,y+S,0)] + 
	vol1[int3(x-S,y+S,z-S)] + 
	vol2[int3(0,y+S,z-S)] + 
	vol3[int3(x+S,y+S,z-S)] + 
	vol4[int3(x+S,y+S,0)] + 
	vol5[int3(x+S,y+S,z+S)] + 
	vol6[int3(0,y+S,z+S)] + 
	vol7[int3(x-S,y+S,z+S)] + 
	vol8[int3(0,y+S,0)] + 
	
	vol9[int3(x+S,0,0)] + 
	vol10[int3(x-S,0,z-S)] + 
	vol11[int3(0,0,z-S)] + 
	vol12[int3(x+S,0,z-S)] + 
	vol13[int3(x+S,0,0)] + 
	vol14[int3(x+S,0,z+S)] + 
	vol15[int3(0,0,z+S)] + 
	vol16[int3(x-S,0,z+S)] + 
	vol17[int3(0,0,0)] + 
	
	vol18[int3(x-S,y-S,0)] + 
	vol19[int3(x-S,y-S,z-S)] + 
	vol20[int3(0,y-S,z-S)] + 
	vol21[int3(x+S,y-S,z-S)] + 
	vol22[int3(x+S,y-S,0)] + 
	vol23[int3(x+S,y-S,z+S)] + 
	vol24[int3(0,y-S,z+S)] + 
	vol25[int3(x-S,y-S,z+S)] + 
	vol26[int3(0,y-S,0)];
	
}
*/


float simplex3d(float3 ws) {  
//thanks to Stefan Gustavson, Linköping University, Sweden
	float xin = ws.x;
	float yin = ws.y;
	float zin = ws.z;
  	const float3 grad3[12] = {
	  	float3(1,1,0),float3(-1,1,0),float3(1,-1,0),float3(-1,-1,0),
     	float3(1,0,1),float3(-1,0,1),float3(1,0,-1),float3(-1,0,-1),
    	float3(0,1,1),float3(0,-1,1),float3(0,1,-1),float3(0,-1,-1)
    }; 
  	const int perm[512] = {151,160,137,91,90,15,
	  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	  190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	  88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,
	  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	  102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,
	  135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,
	  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	  223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,
	  129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,
	  251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,
	  49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
	  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,
	  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	  190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	  88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,
	  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	  102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,
	  135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,
	  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	  223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,
	  129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,
	  251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,
	  49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,
	  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
	};

	const int permMod12[512] = {
		7,4,5,7,6,3,11,1,9,11,0,5,2,5,7,9,8,0,7,6,9,10,8,3,1,0,9,10,11,10,6,4,7,0,6,3,
		0,2,5,2,10,0,3,11,9,11,11,8,9,9,9,4,9,5,8,3,6,8,5,4,3,0,8,7,2,9,11,2,7,0,3,10,5
		,2,2,3,11,3,1,2,0,7,1,2,4,9,8,5,7,10,5,4,4,6,11,6,5,1,3,5,1,0,8,1,5,4,0,7,4,5,
		6,1,8,4,3,10,8,8,3,2,8,4,1,6,5,6,3,4,4,1,10,10,4,3,5,10,2,3,10,6,3,10,1,8,3,2,
		11,11,11,4,10,5,2,9,4,6,7,3,2,9,11,8,8,2,8,10,7,10,5,9,5,11,11,7,4,9,9,10,3,1,7,
		2,0,2,7,5,8,4,10,5,4,8,2,6,1,0,11,10,2,1,10,6,0,0,11,11,6,1,9,3,1,7,9,2,11,11,1,
		0,10,7,1,7,10,1,4,0,0,8,7,1,2,9,7,4,6,2,6,8,1,9,6,6,7,5,0,0,3,9,8,3,6,6,11,1,
		0,0,7,4,5,7,6,3,11,1,9,11,0,5,2,5,7,9,8,0,7,6,9,10,8,3,1,0,9,10,11,10,6,4,7,0,6,3,
		0,2,5,2,10,0,3,11,9,11,11,8,9,9,9,4,9,5,8,3,6,8,5,4,3,0,8,7,2,9,11,2,7,0,3,10,5,
		2,2,3,11,3,1,2,0,7,1,2,4,9,8,5,7,10,5,4,4,6,11,6,5,1,3,5,1,0,8,1,5,4,0,7,4,5,
		6,1,8,4,3,10,8,8,3,2,8,4,1,6,5,6,3,4,4,1,10,10,4,3,5,10,2,3,10,6,3,10,1,8,3,2,
		11,11,11,4,10,5,2,9,4,6,7,3,2,9,11,8,8,2,8,10,7,10,5,9,5,11,11,7,4,9,9,10,3,1,7,
		2,0,2,7,5,8,4,10,5,4,8,2,6,1,0,11,10,2,1,10,6,0,0,11,11,6,1,9,3,1,7,9,2,11,11,1,
		0,10,7,1,7,10,1,4,0,0,8,7,1,2,9,7,4,6,2,6,8,1,9,6,6,7,5,0,0,3,9,8,3,6,6,11,1,0,0
	}; 
	float n0,n1,n2,n3; // Noise contributions from the four corners
	// Skew the input space to determine which simplex cell we're in
	float s = (xin+yin+zin)*F3; // Very nice and simple skew factor for 3D
	int i = floor(xin+s);
	int j = floor(yin+s);
	int k = floor(zin+s);
	float t = (i+j+k)*G3;
	float X0 = i-t; // Unskew the cell origin back to (x,y,z) space
	float Y0 = j-t;
	float Z0 = k-t;
	float x0 = xin-X0; // The x,y,z distances from the cell origin
	float y0 = yin-Y0;
	float z0 = zin-Z0;
	// For the 3D case, the simplex shape is a slightly irregular tetrahedron.
	// Determine which simplex we are in.
	int i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
	int i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
	if(x0>=y0) {
	  if(y0>=z0)
	    { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order
	    else if(x0>=z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order
	    else { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; } // Z X Y order
	  }
	else { // x0<y0
	  if(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order
	  else if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order
	  else { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order
	}
	// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
	// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
	// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
	// c = 1/6.
	float x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
	float y1 = y0 - j1 + G3;
	float z1 = z0 - k1 + G3;
	float x2 = x0 - i2 + 2.0*G3; // Offsets for third corner in (x,y,z) coords
	float y2 = y0 - j2 + 2.0*G3;
	float z2 = z0 - k2 + 2.0*G3;
	float x3 = x0 - 1.0 + 3.0*G3; // Offsets for last corner in (x,y,z) coords
	float y3 = y0 - 1.0 + 3.0*G3;
	float z3 = z0 - 1.0 + 3.0*G3;
	// Work out the hashed gradient indices of the four simplex corners
	int ii = i & 255;
	int jj = j & 255;
	int kk = k & 255;
	int gi0 = permMod12[ii+perm[jj+perm[kk]]];
	int gi1 = permMod12[ii+i1+perm[jj+j1+perm[kk+k1]]];
	int gi2 = permMod12[ii+i2+perm[jj+j2+perm[kk+k2]]];
	int gi3 = permMod12[ii+1+perm[jj+1+perm[kk+1]]];
	// Calculate the contribution from the four corners
	float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;
	if(t0<0){ 
		n0 = 0.0; 
	}
	else {
	  t0 *= t0;
	  n0 = t0 * t0 * dot(grad3[gi0], float3(x0, y0, z0));
	}
	float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;
	if(t1<0){
	 n1 = 0.0; 
 	} else {
	  t1 *= t1;
	  n1 = t1 * t1 * dot(grad3[gi1],float3(x1, y1, z1));
	}
	float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;
	if(t2<0){
		n2 = 0.0; 
	} else {
	  t2 *= t2;
	  n2 = t2 * t2 * dot(grad3[gi2],float3(x2,y2,z2));
	}
	float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;
	if(t3<0){
	 n3 = 0.0;
 	} else {
	  t3 *= t3;
	  n3 = t3 * t3 * dot(grad3[gi3],float3( x3,y3,z3));
	} 

	
	// Add contributions from each corner to get the final noise value.
	// The result is scaled to stay just inside [-1,1]
	return 32.0*(n0 + n1 + n2 + n3);
	//return 0;
}

[numthreads(32,32,1)]
void Simplex3d (uint3 id : SV_DispatchThreadID)
{
	int x,y,z;

	x=id.x;y=id.y;z=id.z;
	
	x += _StartPos.x;y += _StartPos.y; z+=_StartPos.z;
	
	float3 ws = float3(x,y,z);

	float density = 0.0; //1.0

	float noiseA =  simplex3d(float3(x, y, z)* _NoiseA*_Str)*2 - 0.5;
	float noiseB =  simplex3d(float3(x, y, z)* _NoiseB*_Str);
	float noiseC =  simplex3d(float3(x, y, z)* _NoiseC*_Str);

	Result[float3(id.x,id.y,id.z)] = clamp(saturate(density+noiseA+ noiseB + noiseC / 5),-1.0,1.0);

}

[numthreads(1,1,1)]
void Plane (uint3 id : SV_DispatchThreadID)
{
	float Density = 1.0;
	if (_StartPos.y+id.y > 24)
		Density = 0.0;
	Result[float3(id.x,id.y,id.z)] = Density;
}

[numthreads(1,1,1)]
void Sphere (uint3 id : SV_DispatchThreadID)
{

	//float _Brush_Size = 25.0;
 	float3 v_center = float3(30,30,30);
	float3 pPosition = _StartPos+id.xyz; //*20.0
	float dist = distance(pPosition,v_center);
	float density = 30.0-dist;
	density = clamp(density,-1,1);

	Result[id.xyz]=density;//max(density,Result[id.xyz]); //lerp(Result[id.xyz], 
}

[numthreads(1,1,1)]
void SphereAdd (uint3 id : SV_DispatchThreadID)
{
	//float3 v_center = float3(300,300,300);
	float3 v_center = _BrushPos.xyz;
	float3 pPosition = float3(id.xyz); // _StartPos+
	float dist = distance(pPosition,v_center);
	if (dist > _Brush_Size)
		return;
	float density = _Brush_Size-dist;
	//density = clamp(lerp(Result[id.xyz], density, _Brush_Strength),-1,1);
	//density = clamp(lerp(Result[id.xyz], max(density,Result[id.xyz]), _Brush_Strength),-1,1);
	
	/*if (_Brush_Strength >= 0){
		density = clamp( max(density,Result[id.xyz]),-1,1); //Result[id.xyz]=max(density,Result[id.xyz]);
	}
	else{
		density = clamp( min(-density,Result[id.xyz]),-1,1); //Result[id.xyz]=min(density,Result[id.xyz]);
	}*/
	
	Result[id.xyz] = lerp(Result[id.xyz],  max(density,Result[id.xyz]), _Brush_Strength);
	//Result[id.xyz]=clamp(lerp(Result[id.xyz],max(density/20.0,Result[id.xyz]),_Brush_Strength),-1.0,1.0);//lerp(Result[id.xyz], max(density,Result[id.xyz]), _Brush_Strength);
	
	
	
}

[numthreads(1,1,1)]
void FillEmpty (uint3 id : SV_DispatchThreadID)
{
	Result[id.xyz] = 0;
}

[numthreads(1,1,1)]
void FillBorders (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 3)
        Result[id.xyz] = volm100[int3(id.x + 29, id.y, id.z)];
    else if (id.y < 3)
        Result[id.xyz] = vol0m10[int3(id.x, id.y + 29, id.z)];
    else if (id.z < 3)
        Result[id.xyz] = vol00m1[int3(id.x, id.y, id.z + 29)];
    else if (id.x > 28)
        Result[id.xyz] = vol100[int3(id.x - 29, id.y, id.z)];
    else if (id.y > 28)
        Result[id.xyz] = vol010[int3(id.x, id.y - 29, id.z)];
    else if (id.z > 28)
        Result[id.xyz] = vol001[int3(id.x, id.y, id.z - 29)];
		
	//Result[id.xyz]=vol00m1[int3(id.x,id.y,id.z)];
	//Result[id.xyz]=0;	
	//else Result[id.xyz]=vol100[int3(id.x,id.y,id.z)];
}